--- .originals/problem7.c	2023-03-03 22:16:49.000000000 +0000
+++ problem7.c	2023-03-12 01:57:36.345890500 +0000
@@ -1,25 +1,29 @@
 #include <limits.h>
-#include <pthread.h>
 #include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <pthread.h>
+
 
 static const int MAX_BALANCE = 2000000000;
 
 int accountBalance = 1000;
+pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
 
-void flag() {
-  printf("The flag goes here");
-}
+void flag() {
+  printf("The flag goes here");
+}
 
 // Withdraw an amount from the user's account
 void *withdraw(void *arg) {
   unsigned short amount = *(unsigned short *)arg;
 
   // Ensure the user has enough money to complete this transaction
+  pthread_mutex_lock(&mutex);
   if (amount > accountBalance) {
     printf("Insufficient funds for withdrawal of $%hu\n", amount);
+    pthread_mutex_unlock(&mutex);
     return NULL;
   }
 
@@ -29,6 +33,7 @@
   for (unsigned short i = 0; i < amount; i++) {
     --accountBalance;
   }
+  pthread_mutex_unlock(&mutex);
   return NULL;
 }
 
@@ -37,8 +42,10 @@
   unsigned short amount = *(unsigned short *)arg;
 
   // Ensure that the deposit won't overflow the balance.
+  pthread_mutex_lock(&mutex);
   if ((amount + accountBalance) > MAX_BALANCE) {
     printf("Accounts can at most have $%d. This deposit would put you over that limit!\n", MAX_BALANCE);
+    pthread_mutex_unlock(&mutex);
     return NULL;
   }
 
@@ -48,6 +55,7 @@
   for (unsigned short i = 0; i < amount; i++) {
     ++accountBalance;
   }
+  pthread_mutex_unlock(&mutex);
   return NULL;
 }
 
